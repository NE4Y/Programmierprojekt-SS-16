<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <meta name="author" content="Finn Ickler, Steffen Lindner, Dominik Spoerle, Maximillian Pfister" />
  <title> Dokumentation Programmierprojekt SS 16 Arbeitsbereich: Kommunikationsnetze</title>
  <style type="text/css">code{white-space: pre;}</style>
  <link rel="stylesheet" href="pandoc.css" type="text/css" />
</head>
<body>
<div id="header">
<h1 class="title"> Dokumentation Programmierprojekt SS 16<br />
Arbeitsbereich: Kommunikationsnetze</h1>
<h2 class="author">Finn Ickler, Steffen Lindner, Dominik Spoerle, Maximillian Pfister</h2>
</div>
<div id="TOC">
<ul>
<li><a href="#beschreibung-der-software">Beschreibung der Software</a><ul>
<li><a href="#grundstruktur">Grundstruktur</a><ul>
<li><a href="#router">Router</a></li>
<li><a href="#main-controller">Main Controller</a></li>
<li><a href="#view">View</a></li>
</ul></li>
</ul></li>
</ul>
</div>
<h1 id="beschreibung-der-software">Beschreibung der Software</h1>
<h2 id="grundstruktur">Grundstruktur</h2>
<p>Die folgende Grafik illustriert das Grundsystem der Software.</p>
<div class="figure">
<img src="./Includes/Software/architektur.png" alt="Software Grundstruktur" style="width:70.0%" />
<p class="caption">Software Grundstruktur<span data-label="fig:somthing"></span></p>
</div>
<p>Das Grundsystem ist nach dem MVC-Prinzip<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> gestaltet.</p>
<p>Dabei ist das System aufgespalten in verschiedene Templates (Views), die von ihrem zugehörigen Controller (View Controller) manipuliert werden. Der View Controller nutzt das Model um die nötigen Daten vom Server zu erhalten.</p>
<p>Das Model ist (nach dem MVC-Prinzip) für die Datenhaltung zuständig.</p>
<h3 id="router">Router</h3>
<p>Der Router wird genutzt, um ein URL-Template matching durchzuführen.</p>
<p>Es lassen sich dadurch sehr leicht ’Pfade’ entsprechenden Templates zuordnen.</p>
<pre language="php"><code>Route::add(&quot;/home&quot;, function() {Controller::dispatch(&quot;home&quot;);});	</code></pre>
<p>Dadurch sehen die URL’s nicht nur schöner aus, es hat auch SEO<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> Vorteile.</p>
<p>Sobald die Route ’/home’ aufgerufen wird (beispielsweise: wolfgang.ne4y.de/home), wird die hinterlegte Funktion ausgeführt (in diesem Fall Controller::dispatch(’home’);)</p>
<p>Dabei wird über ein Patternmatching die aktuelle <span><strong>Requested-URI</strong></span> <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> mit den ’angekündigten’ Pfaden verglichen. Stimmt ein Pfad überein, wird die hinterlegte Funktion ausgeführt.</p>
<h3 id="main-controller">Main Controller</h3>
<p>Der Main-Controller implementiert die grundlegenden Steuerfunktionen unserer Software. Dazu zählt das Rendern der Templates, das Aufrufen der entsprechenden Template-Controller sowie das Umleiten des Users.</p>
<p>Der Main Controller wird in den meisten Fällen direkt vom Router aufgerufen. Er implementiert folgende Methoden / Attribute:</p>
<div class="figure">
<img src="./Includes/Software/Controller.png" alt="Main-Controller" style="width:60.0%" />
<p class="caption">Main-Controller<span data-label="fig:somthing"></span></p>
</div>
<p>Dabei ist die wichtigste Funktion das Initialisieren eines Smarty objects (initSmarty()), sowie das Dispatchen eines Templates (dispatch(String tpl), wird vom Router aufgerufen).</p>
<p>Während des Dispatchprozesses wird der zugehörige Templatecontroller geladen.</p>
<h3 id="view">View</h3>
<p>Der View wird durch ein Templatingsystem umgesetzt. Dafür verwendet unsere Software die Templateengine Smarty<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>.</p>
<p>Smarty wird genutzt, um den HTML-Code von der Businesslogik zu trennen.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>MVC-Prinzip: Model View-Controller Abspaltung zur Strukturierung von Software<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>SEO: Suchmaschinennoptimierung<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Requested-URI: Angefragte URL Zeile, die vom Webserver an den PHP-Interpreter weitergegeben wird<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Smarty: Templatingengine, mehr Informationen auf: http://smarty.net<a href="#fnref4">↩</a></p></li>
</ol>
</div>
</body>
</html>
